buildspecs:
  multiline_run:
    executor: generic.local.bash
    type: script
    description: multiline run command
    run: |
      echo "1"
      echo "2"

  single_command_run:
    executor: generic.local.bash
    type: script
    description: single command as a string for run command
    run: "hostname"

  declare_env:
    executor: generic.local.bash
    type: script
    description: declaring environment variables
    env:
      FOO: BAR
      X: 1
    run: |
      echo $FOO
      echo $X

  declare_vars:
    executor: generic.local.bash
    type: script
    description: declaring variables
    vars:
      First: Bob
      Last:  Bill
    run: |
      echo "First:" $First
      echo "Last:" $Last


  declare_shell_sh:
    executor: generic.local.sh
    type: script
    description: declare shell name to sh
    shell: sh
    run: hostname

  declare_shell_bash:
    executor: generic.local.bash
    type: script
    description: declare shell name to bash
    shell: bash
    run: hostname

  declare_shell_python:
    executor: generic.local.bash
    type: script
    description: declare shell name to python
    shell: python
    run: |
      print("Hello World")

  declare_shell_bin_bash:
    executor: generic.local.bash
    type: script
    description: declare shell name to /bin/bash
    shell: "/bin/bash -e"
    run: hostname

  declare_shell_name_bin_sh:
    executor: generic.local.sh
    type: script
    description: declare shell name to /bin/sh
    shell: "/bin/sh -e"
    run: hostname

  declare_shell_opts:
    executor: generic.local.sh
    type: script
    description: declare shell name to sh
    shell: "sh -e"
    run: hostname

  declare_shell_bin_zsh:
    executor: generic.local.zsh
    type: script
    description: declare shell zsh
    shell: "zsh"
    run: hostname

  declare_shell_zsh:
    executor: generic.local.zsh
    type: script
    description: declare shell /bin/zsh
    shell: "zsh"
    run: hostname

  declare_shell_bin_csh:
    executor: generic.local.csh
    type: script
    description: declare shell /bin/csh
    shell: "/bin/csh"
    run: hostname

  declare_shell_csh:
    executor: generic.local.csh
    type: script
    description: declare shell /bin/tcsh
    shell: "csh"
    run: hostname

  declare_shell_bin_tcsh:
    executor: generic.local.csh
    type: script
    description: declare shell /bin/tcsh
    shell: "/bin/tcsh"
    run: hostname


  declare_shell_tcsh:
    executor: generic.local.csh
    type: script
    description: declare shell tcsh
    shell: "tcsh"
    run: hostname

  declare_shebang:
    executor: generic.local.bash
    type: script
    description: declare shell name to sh
    shebang: "#!/usr/bin/env bash"
    run: hostname

  status_returncode_list:
    executor: generic.local.bash
    type: script
    description: The returncode can be a list of integers
    run: exit 0
    status:
      returncode: [0]

  status_returncode_int:
    executor: generic.local.bash
    type: script
    description: The returncode can be an integer to match with single returncode
    run: exit 0
    status:
      returncode: 0

  status_regex:
    executor: generic.local.bash
    type: script
    description: This test pass with a regular expression status check
    run: hostname
    status:
      regex:
        stream: stdout
        exp: "^$"

  status_regex_returncode:
    executor: generic.local.bash
    type: script
    description: This test fails because returncode and regex specified
    run: hostname
    status:
      returncode: [0]
      regex:
        stream: stdout
        exp: "^hello"


  status_runtime_min_max:
    type: script
    executor: generic.local.sh
    description: "Run a sleep job for 2 seconds and test pass if its within 1.0-4.0sec"
    tags: ["tutorials"]
    run: sleep 2
    status:
      runtime:
        min: 1.0
        max: 4.0

  status_runtime_min:
    type: script
    executor: generic.local.sh
    description: "Run a sleep job for 2 seconds and test pass if exceeds mintime of 1.0sec"
    tags: ["tutorials"]
    run: sleep 2
    status:
      runtime:
        min: 1.0

  status_runtime_max:
    type: script
    executor: generic.local.sh
    description: "Run a sleep job for 2 seconds and test pass if less than maxtime of 4.0sec"
    tags: ["tutorials"]
    run: sleep 2
    status:
      runtime:
        max: 4.0

  sbatch_example:
    type: script
    executor: generic.local.bash
    description: This test runs hostname using sbatch directives
    sbatch:
      - "-t 10:00:00"
      - "-p normal"
      - "-N 1"
      - "-n 8"
    run: hostname

  bsub_example:
    type: script
    executor: generic.local.bash
    description: This test runs hostname using bsub directives
    bsub:
      - "-W 00:30"
      - "-N 1"
    run: hostname

  cobalt_example:
    type: script
    executor: generic.local.bash
    description: This test runs hostname using cobalt directives
    cobalt:
      - "-t 30"
      - "-n 1"
    run: hostname

  skip_example:
    type: script
    executor: generic.local.bash
    description: this test is skip
    skip: true
    run: hostname

  tag_str_example:
    type: script
    executor: generic.local.bash
    description: tags can be defined as string
    tags: network
    run: hostname

  tag_list_example:
    type: script
    executor: generic.local.bash
    description: This is a tag example using list
    sbatch:
      - "-t 10:00:00"
      - "-p normal"
      - "-N 1"
      - "-n 8"
    tags: ["slurm"]
    run: hostname

  metrics_regex_example:
    type: script
    executor: generic.local.bash
    description: metrics regular expression example
    run: echo "HPCG result is VALID with a GFLOP/s rating of=63.6515"
    metrics:
      hpcg_rating:
        regex:
          exp: 'rating of=(\d+\.\d+)$'
          stream: stdout

  metric_variable_assignment:
    executor: generic.local.sh
    type: script
    description: capture result metric based on variables and environment variable
    vars:
      GFLOPS: "63.6515"
    env:
      FOO: BAR
    run: |
      echo $GFLOPS
      echo $FOO
    tags: tutorials
    metrics:
      gflops:
        vars: "GFLOPS"
      foo:
        env: "FOO"

  multi_executor_vars:
    type: script
    executor: 'generic.local.(sh|bash)'
    description: single test multiple executor with variable declaration
    run: |
      echo $X
      echo $Y
    executors:
      generic.local.sh:
        vars:
          X: 1
          Y: 2
      generic.local.bash:
        vars:
          X: 10
          Y: 11

  multi_executor_environment:
    type: script
    executor: 'generic.local.(sh|bash)'
    description: single test multiple executor with environment declaration
    run: echo $SHELL
    executors:
      generic.local.sh:
        env:
          SHELL: sh
      generic.local.bash:
        env:
          SHELL: bash

  executors_sbatch_declaration:
    type: script
    executor: 'generic.local.(bash|sh)'
    description: Declaring sbatch by executors section
    tags: [tutorials]
    run: hostname
    sbatch: ["-N 4"]
    executors:
      generic.local.bash:
        sbatch: ["-n 4", "-N 1", "-t 30"]
      generic.local.sh:
        sbatch: ["-n 8", "-N 1", "-t 60"]

  executors_bsub_declaration:
    type: script
    executor: 'generic.local.(bash|sh)'
    description: Declaring bsub  by executors section
    tags: [tutorials]
    run: hostname
    executors:
      generic.local.bash:
        bsub: ["-n 4", "-W 30"]
      generic.local.sh:
        bsub: ["-n 8", "-W 60"]

  executors_pbs_declaration:
    type: script
    executor: 'generic.local.(bash|sh)'
    description: Declaring pbs by executors section
    tags: [tutorials]
    run: hostname
    executors:
      generic.local.bash:
        pbs: ["-l ncpus=4", "-l walltime=30"]
      generic.local.sh:
        pbs: ["-l ncpus=8", "-l walltime=60"]

  executors_status_declaration:
    type: script
    executor: 'generic.local.(bash|sh)'
    description: Declaring status by executors section
    tags: [tutorials]
    run: exit 0
    executors:
      generic.local.bash:
        status:
          returncode: 0
      generic.local.sh:
        status:
          returncode: [1, 2]

  executors_metrics_declaration:
    type: script
    executor: 'generic.local.(bash|sh)'
    description: Declaring metrics by executors section
    tags: [tutorials]
    run: echo "Hello World"
    executors:
      generic.local.bash:
        metrics:
          hello:
            regex:
              stream: stdout
              exp: "(Hello)"
      generic.local.sh:
        metrics:
          world:
            regex:
              stream: stdout
              exp: "(World)"